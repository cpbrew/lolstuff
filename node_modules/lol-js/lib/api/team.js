// Generated by CoffeeScript 1.9.0
(function() {
  var api, assert, async, ld, matchApi, promiseToCb;

  assert = require('assert');

  ld = require('lodash');

  async = require('async');

  matchApi = require('./match');

  promiseToCb = require('../utils').promiseToCb;

  api = exports.api = {
    fullname: "team-v2.4",
    name: "team",
    version: "v2.4"
  };

  exports.methods = {
    getTeamsBySummonerAsync: function(summonerIds, options) {
      var region, _ref;
      if (options == null) {
        options = {};
      }
      region = (_ref = options.region) != null ? _ref : this.defaultRegion;
      return this._riotMultiGet({
        caller: "getTeamsBySummoner",
        baseUrl: (this._makeUrl(region, api)) + "/by-summoner",
        ids: summonerIds,
        getCacheParamsFn: (function(client, region, summonerId) {
          return {
            key: api.fullname + "-teamsForSummonerId-" + region + "-" + summonerId,
            api: api,
            region: region,
            objectType: 'teamsForSummonerId',
            params: {
              summonerId: summonerId
            }
          };
        }),
        maxObjs: 10
      }, options);
    },
    getTeamsAsync: function(teamIds, options) {
      var region, _ref;
      if (options == null) {
        options = {};
      }
      region = (_ref = options.region) != null ? _ref : this.defaultRegion;
      return this._riotMultiGet({
        caller: "getTeams",
        baseUrl: "" + (this._makeUrl(region, api)),
        ids: teamIds,
        getCacheParamsFn: (function(client, region, teamId) {
          return {
            key: api.fullname + "-team-" + region + "-" + teamId,
            api: api,
            region: region,
            objectType: 'team',
            params: {
              teamId: teamId
            }
          };
        }),
        maxObjs: 10
      }, options);
    },
    getTeamAsync: function(teamId, options) {
      if (options == null) {
        options = {};
      }
      return this.getTeamsAsync(teamId, options).then(function(answer) {
        return answer != null ? answer[teamId] : void 0;
      });
    }
  };

}).call(this);
