// Generated by CoffeeScript 1.9.0
(function() {
  var MAX_SUMMONER_IDS_PER_REQUEST, MAX_SUMMONER_NAMES_PER_REQUEST, api, cacheSummoner, ld, promiseToCb, summonerByIdCacheParams, summonerByNameCacheParams, toStandardizedSummonerName;

  ld = require('lodash');

  promiseToCb = require('../utils').promiseToCb;

  api = exports.api = {
    fullname: "summoner-v1.4",
    name: "summoner",
    version: "v1.4"
  };

  MAX_SUMMONER_NAMES_PER_REQUEST = 40;

  MAX_SUMMONER_IDS_PER_REQUEST = 40;

  toStandardizedSummonerName = function(name) {
    return name.toLowerCase().replace(/\ /g, '');
  };

  exports.methods = {
    getSummonersByNameAsync: function(summonerNames, options) {
      var namesToStandardizedNames, region, standardizedName, standardizedNames, summonerName, _i, _len, _ref;
      if (options == null) {
        options = {};
      }
      region = (_ref = options.region) != null ? _ref : this.defaultRegion;
      namesToStandardizedNames = {};
      standardizedNames = [];
      for (_i = 0, _len = summonerNames.length; _i < _len; _i++) {
        summonerName = summonerNames[_i];
        standardizedName = toStandardizedSummonerName(summonerName);
        namesToStandardizedNames[summonerName] = standardizedName;
        standardizedNames.push(standardizedName);
      }
      return this._riotMultiGet({
        caller: "getSummonersByName",
        baseUrl: (this._makeUrl(region, api)) + "/by-name",
        ids: standardizedNames,
        getCacheParamsFn: summonerByNameCacheParams,
        cacheResultFn: cacheSummoner,
        maxObjs: MAX_SUMMONER_NAMES_PER_REQUEST
      }, options).then(function(result) {
        var answer, _j, _len1;
        answer = {};
        for (_j = 0, _len1 = summonerNames.length; _j < _len1; _j++) {
          summonerName = summonerNames[_j];
          standardizedName = namesToStandardizedNames[summonerName];
          answer[summonerName] = result[standardizedName];
        }
        return answer;
      });
    },
    getSummonersByIdAsync: function(summonerIds, options) {
      var region, _ref;
      if (options == null) {
        options = {};
      }
      region = (_ref = options.region) != null ? _ref : this.defaultRegion;
      return this._riotMultiGet({
        caller: "getSummonersById",
        baseUrl: this._makeUrl(region, api),
        ids: summonerIds,
        getCacheParamsFn: summonerByIdCacheParams('summoner'),
        maxObjs: MAX_SUMMONER_NAMES_PER_REQUEST
      }, options);
    },
    getSummonerNamesAsync: function(summonerIds, options) {
      if (options == null) {
        options = {};
      }
      return this.getSummonersByIdAsync(summonerIds, options).then(function(summoners) {
        return ld.mapValues(summoners, function(x) {
          var _ref;
          return (_ref = x != null ? x.name : void 0) != null ? _ref : null;
        });
      });
    },
    getSummonerMasteriesAsync: function(summonerIds, options) {
      var region, _ref;
      if (options == null) {
        options = {};
      }
      region = (_ref = options.region) != null ? _ref : this.defaultRegion;
      return this._riotMultiGet({
        caller: "getSummonerMasteries",
        baseUrl: this._makeUrl(region, api),
        ids: summonerIds,
        urlSuffix: "/masteries",
        getCacheParamsFn: summonerByIdCacheParams('masteries'),
        maxObjs: MAX_SUMMONER_NAMES_PER_REQUEST
      }, options);
    },
    getSummonerRunesAsync: function(summonerIds, options) {
      var region, _ref;
      if (options == null) {
        options = {};
      }
      region = (_ref = options.region) != null ? _ref : this.defaultRegion;
      return this._riotMultiGet({
        caller: "getSummonerRunes",
        baseUrl: this._makeUrl(region, api),
        ids: summonerIds,
        urlSuffix: "/runes",
        getCacheParamsFn: summonerByIdCacheParams('runes'),
        maxObjs: MAX_SUMMONER_NAMES_PER_REQUEST
      }, options);
    }
  };

  cacheSummoner = function(client, region, summoner) {
    client.cache.set(summonerByIdCacheParams(this, region, summoner.id), summoner);
    return client.cache.set(summonerByNameCacheParams(this, region, summoner.name), summoner);
  };

  summonerByNameCacheParams = function(client, region, summonerName) {
    return {
      key: api.fullname + "-summonerByName-" + region + "-" + (summonerName.toLowerCase()),
      api: api,
      region: region,
      objectType: 'summonerByName',
      params: {
        summonerName: summonerName.toLowerCase()
      }
    };
  };

  summonerByIdCacheParams = function(objectType) {
    return function(client, region, summonerId) {
      return {
        key: api.fullname + "-" + objectType + "-" + region + "-" + summonerId,
        api: api,
        region: region,
        objectType: objectType,
        params: {
          summonerId: summonerId
        }
      };
    };
  };

}).call(this);
